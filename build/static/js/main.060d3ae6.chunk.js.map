{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["sketch","p","SNOW_COLOR","SKY_COLOR","WIND_CHANGE","SUN_COLOR","SNOWFLAKES","setup","createCanvas","fill","noStroke","l","push","i","x","random","width","y","height","mass","draw","background","skyHeight","round","drawRidge","RIDGE_AMP","drawingContext","shadowBlur","shadowColor","circle","SUN_RADIUS","length","SNOWLAYER","snowflake","updateSnowflake","amp","zoom","c1","c2","coff","FILL","lerpColor","color","LAYER_COUNT","beginShape","noisedY","noise","vertex","endShape","CLOSE","diameter","wind","frameCount","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.060d3ae6.chunk.js","sourcesContent":["import './App.css';\n// @ts-ignore\nimport P5Wrapper from 'react-p5-wrapper';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <P5Wrapper sketch={sketch} />\n      </header>\n    </div>\n  );\n}\n\nfunction sketch (p) {\n  const SNOW_COLOR = \"snow\";\n  const SNOWFLAKES_PER_LAYER = 200;\n  const MAX_SIZE = 10;\n  const GRAVITY = 0.5;\n  const LAYER_COUNT = 4;\n\n  const SKY_COLOR = \"skyblue\";\n  const SKY_SPACE = 0.4;\n  const SKY_AMP = 150;\n  const SKY_ZOOM = 0.0025;\n  const SKY_LAYER_OFFSET = 3;\n\n  const WIND_SPEED = 1;\n  const WIND_CHANGE = 0.0025;\n\n  const SUN_COLOR = \"#FFF2AD\";\n  const SUN_GLOW = 100;\n  const SUN_RADIUS = 150;\n\n  const RIDGE_TOP_COLOR = \"#BCCEDD\";\n  const RIDGE_BOT_COLOR = \"#7E9CB9\";\n  const RIDGE_STEP = 4;\n  const RIDGE_AMP = 250;\n  const RIDGE_ZOOM = 0.005;\n\n  const SNOWFLAKES = [];\n\n  p.setup = () => {\n    p.createCanvas(1080, 1350);\n    p.fill(SNOW_COLOR);\n    p.noStroke();\n    // Initialize the snowflakes with random positions\n    for (let l = 0; l < LAYER_COUNT; l++) {\n      SNOWFLAKES.push([]);\n      for (let i = 0; i < SNOWFLAKES_PER_LAYER; i++) {\n        SNOWFLAKES[l].push({\n          x: p.random(p.width),\n          y: p.random(p.height),\n          mass: p.random(0.75, 1.25),\n          l: l + 1\n        });\n      }\n    }\n  }\n\n  p.draw = () => {\n    p.background(SKY_COLOR);\n    const skyHeight = p.round(p.height * SKY_SPACE);\n    for (let i = 1; i < LAYER_COUNT; i++) {\n      drawRidge(\n        i,\n        (i * skyHeight) / LAYER_COUNT,\n        SKY_AMP,\n        SKY_ZOOM,\n        SKY_COLOR,\n        SUN_COLOR,\n        SKY_LAYER_OFFSET\n      );\n    }\n\n    drawSun(p.width / 2, skyHeight - RIDGE_AMP / 2);\n\n      // Iterate through the layers of snowflakes\n    for (let l = 0; l < SNOWFLAKES.length; l++) {\n      const SNOWLAYER = SNOWFLAKES[l];\n\n      // Draw a ridge for each layer of snow\n      const layerPosition = l * ((p.height - skyHeight) / LAYER_COUNT);\n      drawRidge(\n        l,\n        skyHeight + layerPosition,\n        RIDGE_AMP,\n        RIDGE_ZOOM,\n        RIDGE_TOP_COLOR,\n        RIDGE_BOT_COLOR,\n        0\n      );\n\n      // Draw each snowflake\n      for (let i = 0; i < SNOWLAYER.length; i++) {\n        const snowflake = SNOWLAYER[i];\n        p.circle(snowflake.x, snowflake.y, (snowflake.l * MAX_SIZE) / LAYER_COUNT);\n        updateSnowflake(snowflake);\n      }\n    }\n\n      // Compute and draw a ridge\n    function drawRidge(l, y, amp, zoom, c1, c2, coff) {\n      // Choose a color for the ridge based on its height\n      const FILL = p.lerpColor(p.color(c1), p.color(c2), l / (LAYER_COUNT - 1 + coff));\n      p.fill(FILL);\n\n      p.beginShape();\n      // Iterate through the width of the canvas\n      for (let x = 0; x <= p.width; x += RIDGE_STEP) {\n        const noisedY = p.noise(x * zoom, y);\n        p.vertex(x, y - noisedY * amp);\n      }\n      p.vertex(p.width, p.height);\n      p.vertex(0, p.height);\n      p.endShape(p.CLOSE);\n      p.fill(SNOW_COLOR);\n    }\n\n        // Draw a simple sun\n    function drawSun(x, y) {\n      p.fill(SUN_COLOR);\n      p.drawingContext.shadowBlur = SUN_GLOW;\n      p.drawingContext.shadowColor = SUN_COLOR;\n      p.circle(x, y, SUN_RADIUS * 2);\n      p.drawingContext.shadowBlur = 0;\n    }\n\n\n        // Helper function to prepare a given snowflake for the next frame\n    function updateSnowflake(snowflake) {\n      const diameter = (snowflake.l * MAX_SIZE) / LAYER_COUNT;\n      if (snowflake.y > p.height + diameter) snowflake.y = -diameter;\n      else snowflake.y += GRAVITY * snowflake.l * snowflake.mass;\n\n      // Get the wind speed at the given layer and area of the page\n      const wind =\n        p.noise(snowflake.l, snowflake.y * WIND_CHANGE, p.frameCount * WIND_CHANGE) -\n        0.5;\n      if (snowflake.x > p.width + diameter) snowflake.x = -diameter;\n      else if (snowflake.x < -diameter) snowflake.x = p.width + diameter;\n      else snowflake.x += wind * WIND_SPEED * snowflake.l;\n    }\n\n  \n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}